// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	notifications "github.com/Tagliatti/magalu-challenge/notifications"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateNotification provides a mock function with given fields: createNotification
func (_m *Repository) CreateNotification(createNotification *notifications.CreateNotification) (int64, error) {
	ret := _m.Called(createNotification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*notifications.CreateNotification) (int64, error)); ok {
		return rf(createNotification)
	}
	if rf, ok := ret.Get(0).(func(*notifications.CreateNotification) int64); ok {
		r0 = rf(createNotification)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*notifications.CreateNotification) error); ok {
		r1 = rf(createNotification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type Repository_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - createNotification *notifications.CreateNotification
func (_e *Repository_Expecter) CreateNotification(createNotification interface{}) *Repository_CreateNotification_Call {
	return &Repository_CreateNotification_Call{Call: _e.mock.On("CreateNotification", createNotification)}
}

func (_c *Repository_CreateNotification_Call) Run(run func(createNotification *notifications.CreateNotification)) *Repository_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*notifications.CreateNotification))
	})
	return _c
}

func (_c *Repository_CreateNotification_Call) Return(_a0 int64, _a1 error) *Repository_CreateNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CreateNotification_Call) RunAndReturn(run func(*notifications.CreateNotification) (int64, error)) *Repository_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationByID provides a mock function with given fields: id
func (_m *Repository) DeleteNotificationByID(id int64) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_DeleteNotificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationByID'
type Repository_DeleteNotificationByID_Call struct {
	*mock.Call
}

// DeleteNotificationByID is a helper method to define mock.On call
//   - id int64
func (_e *Repository_Expecter) DeleteNotificationByID(id interface{}) *Repository_DeleteNotificationByID_Call {
	return &Repository_DeleteNotificationByID_Call{Call: _e.mock.On("DeleteNotificationByID", id)}
}

func (_c *Repository_DeleteNotificationByID_Call) Run(run func(id int64)) *Repository_DeleteNotificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Repository_DeleteNotificationByID_Call) Return(_a0 bool, _a1 error) *Repository_DeleteNotificationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_DeleteNotificationByID_Call) RunAndReturn(run func(int64) (bool, error)) *Repository_DeleteNotificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindNotificationByID provides a mock function with given fields: id
func (_m *Repository) FindNotificationByID(id int64) (*notifications.Notification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindNotificationByID")
	}

	var r0 *notifications.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*notifications.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *notifications.Notification); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindNotificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNotificationByID'
type Repository_FindNotificationByID_Call struct {
	*mock.Call
}

// FindNotificationByID is a helper method to define mock.On call
//   - id int64
func (_e *Repository_Expecter) FindNotificationByID(id interface{}) *Repository_FindNotificationByID_Call {
	return &Repository_FindNotificationByID_Call{Call: _e.mock.On("FindNotificationByID", id)}
}

func (_c *Repository_FindNotificationByID_Call) Run(run func(id int64)) *Repository_FindNotificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Repository_FindNotificationByID_Call) Return(_a0 *notifications.Notification, _a1 error) *Repository_FindNotificationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindNotificationByID_Call) RunAndReturn(run func(int64) (*notifications.Notification, error)) *Repository_FindNotificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindNotificationStatusByID provides a mock function with given fields: id
func (_m *Repository) FindNotificationStatusByID(id int64) (*notifications.NotificationStatus, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindNotificationStatusByID")
	}

	var r0 *notifications.NotificationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*notifications.NotificationStatus, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *notifications.NotificationStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.NotificationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindNotificationStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNotificationStatusByID'
type Repository_FindNotificationStatusByID_Call struct {
	*mock.Call
}

// FindNotificationStatusByID is a helper method to define mock.On call
//   - id int64
func (_e *Repository_Expecter) FindNotificationStatusByID(id interface{}) *Repository_FindNotificationStatusByID_Call {
	return &Repository_FindNotificationStatusByID_Call{Call: _e.mock.On("FindNotificationStatusByID", id)}
}

func (_c *Repository_FindNotificationStatusByID_Call) Run(run func(id int64)) *Repository_FindNotificationStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Repository_FindNotificationStatusByID_Call) Return(_a0 *notifications.NotificationStatus, _a1 error) *Repository_FindNotificationStatusByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindNotificationStatusByID_Call) RunAndReturn(run func(int64) (*notifications.NotificationStatus, error)) *Repository_FindNotificationStatusByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationAsSent provides a mock function with given fields: id
func (_m *Repository) UpdateNotificationAsSent(id int64) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationAsSent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateNotificationAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationAsSent'
type Repository_UpdateNotificationAsSent_Call struct {
	*mock.Call
}

// UpdateNotificationAsSent is a helper method to define mock.On call
//   - id int64
func (_e *Repository_Expecter) UpdateNotificationAsSent(id interface{}) *Repository_UpdateNotificationAsSent_Call {
	return &Repository_UpdateNotificationAsSent_Call{Call: _e.mock.On("UpdateNotificationAsSent", id)}
}

func (_c *Repository_UpdateNotificationAsSent_Call) Run(run func(id int64)) *Repository_UpdateNotificationAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Repository_UpdateNotificationAsSent_Call) Return(_a0 bool, _a1 error) *Repository_UpdateNotificationAsSent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateNotificationAsSent_Call) RunAndReturn(run func(int64) (bool, error)) *Repository_UpdateNotificationAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
